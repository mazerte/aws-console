#!/usr/bin/env python3

import json
from urllib import parse, request
import webbrowser
import argparse
import boto3
import os
import io
import json
from pathlib import Path
from datetime import datetime, timedelta

def resolve_url(service, region):
  if service == 'elb':
    return f'https://console.aws.amazon.com/ec2/home?region={region}#LoadBalancers:sort=loadBalancerName'
  return f'https://console.aws.amazon.com/{service}/home?region={region}'

def open_console(service='console', region=None, profile_name=None, echo_to_stdout=False, force=False):
  try:
    with io.open(f'{Path.home()}/.aws/console.cache', 'r', encoding='utf8') as content:
      config = json.load(content)
  except:
    config = None

  sess = boto3.Session(profile_name=profile_name)
  if region == None:
    region = sess.region_name

  if config == None or config['expire_at'] < f'{datetime.now()}' or config['profile'] != profile_name or force:
    creds = sess.get_credentials()
    url_credentials = dict(sessionId=creds.access_key,sessionKey=creds.secret_key, sessionToken=creds.token)

    request_parameters = "?Action=getSigninToken"
    request_parameters += "&DurationSeconds=43200"
    request_parameters += "&Session=" + parse.quote_plus(json.dumps(url_credentials))
    request_url = "https://signin.aws.amazon.com/federation" + request_parameters
    with request.urlopen(request_url) as response:
      if not response.status == 200:
        raise Exception("Failed to get federation token")
      signin_token = json.loads(response.read())


    request_parameters = "?Action=login"
    request_parameters += "&Destination=" + parse.quote_plus(resolve_url(service, region))
    request_parameters += "&SigninToken=" + signin_token["SigninToken"]
    request_parameters += "&Issuer=" + parse.quote_plus("https://example.com")
    request_url = "https://signin.aws.amazon.com/federation" + request_parameters

    if echo_to_stdout:
      print(request_url)
    else:
      cache = {
        'expire_at': f'{datetime.now() + timedelta(seconds=43200)}',
        'profile': profile_name
      }
      with io.open(f'{Path.home()}/.aws/console.cache', 'w', encoding='utf8') as outfile:
        json.dump(cache, outfile)
      webbrowser.open(request_url)
  else:
    webbrowser.open(resolve_url(service, region))

if __name__ == '__main__':
  parser = argparse.ArgumentParser(description='Open the AWS console in your web browser, using your AWS CLI credentials')
  parser.add_argument('--profile', default=None, help='the AWS profile to create the presigned URL with')
  parser.add_argument('--region', default=os.getenv('AWS_DEFAULT_REGION'), help='the AWS region you want to access')
  parser.add_argument('--stdout', action='store_true', help='don\'t open the webbrowser, but echo the signin URL to stdout')
  parser.add_argument('--force', action='store_true', help='Force token re-generation')
  parser.add_argument('service', default='console', nargs='?', help='Service to open in the console (ex: s3)')

  args = parser.parse_args()
  open_console(args.service, args.region, args.profile, args.stdout, args.force)
